/*

Cleaning Data in SQL

*/

USE PortfolioProject

SELECT * FROM NashvilleHousing

--------------------------------------------------------------------------------------------------
-- Standardize date format

SELECT SaleDate, CONVERT (date, SaleDate) AS SaleDateShort
FROM NashvilleHousing

ALTER TABLE NashvilleHousing
ADD SaleDateShort date;

-- Update the table

UPDATE NashvilleHousing
SET SaleDateShort = CONVERT (date, SaleDate);


--------------------------------------------------------------------------------------------------
-- Populate property adress data

-- Problem: Some transactions  have NULL instead of adress


SELECT *
FROM NashvilleHousing
WHERE PropertyAddress IS NULL
ORDER BY ParcelID

-- Solution: Extract adresses for these properties from other transactions

SELECT nh1.ParcelID, nh1.PropertyAddress, nh2.ParcelID, nh2.PropertyAddress, ISNULL(nh1.PropertyAddress, nh2.PropertyAddress)
FROM NashvilleHousing AS nh1
JOIN NashvilleHousing AS nh2
	ON nh1.ParcelID = nh2.ParcelID
	AND nh1.[UniqueID ] <> nh2.[UniqueID ]
WHERE nh1.PropertyAddress IS NULL

-- Update the table

UPDATE nh1
SET nh1.PropertyAddress = ISNULL(nh1.PropertyAddress, nh2.PropertyAddress)
FROM NashvilleHousing AS nh1
JOIN NashvilleHousing AS nh2
	ON nh1.ParcelID = nh2.ParcelID
	AND nh1.[UniqueID ] <> nh2.[UniqueID ]
WHERE nh1.PropertyAddress IS NULL


--------------------------------------------------------------------------------------------------
-- Breaking out adress to individual columns (Adress, City, State)

-- PROPERTY ADRESS, USING SUBSTRING

SELECT PropertyAddress
FROM NashvilleHousing

-- Problem: Street and city are in the same cell
-- Solution: SUBSTRING

SELECT 
	SUBSTRING (PropertyAddress, 1, CHARINDEX (',', PropertyAddress) -1), 
	SUBSTRING (PropertyAddress, CHARINDEX (',', PropertyAddress) + 1, LEN(PropertyAddress))
FROM NashvilleHousing

-- Add new columns to the table

ALTER TABLE NashvilleHousing
ADD PropertyAddressStreet Nvarchar (255)

UPDATE NashvilleHousing
SET PropertyAddressStreet = SUBSTRING (PropertyAddress, 1, CHARINDEX (',', PropertyAddress) -1)

ALTER TABLE NashvilleHousing
ADD PropertyAddressCity Nvarchar (255)

UPDATE NashvilleHousing
SET PropertyAddressCity = SUBSTRING (PropertyAddress, CHARINDEX (',', PropertyAddress) + 1, LEN(PropertyAddress))


-- OWNER ADRESS, USING PARSENAME

-- Same problem, another solution (PARSENAME)

SELECT 
	PARSENAME (REPLACE(OwnerAddress, ',', '.'), 3),
	PARSENAME (REPLACE(OwnerAddress, ',', '.'), 2),
	PARSENAME (REPLACE(OwnerAddress, ',', '.'), 1)
FROM NashvilleHousing

-- Add new columns to the table

ALTER TABLE NashvilleHousing
ADD OwnerAddressStreet Nvarchar (255)

UPDATE NashvilleHousing
SET OwnerAddressStreet = PARSENAME (REPLACE(OwnerAddress, ',', '.'), 3)

ALTER TABLE NashvilleHousing
ADD OwnerAddressCity Nvarchar (255)

UPDATE NashvilleHousing
SET OwnerAddressCity = PARSENAME (REPLACE(OwnerAddress, ',', '.'), 2)

ALTER TABLE NashvilleHousing
ADD OwnerAddressState Nvarchar (255)

UPDATE NashvilleHousing
SET OwnerAddressState = PARSENAME (REPLACE(OwnerAddress, ',', '.'), 1)


--------------------------------------------------------------------------------------------------
-- Change Y and N to Yes and No in SoldAsVacant column

-- Problem: SoldAsVacant has two variants for "Yes" and "No", better to standartize them
-- Solution: change values using CASE

SELECT DISTINCT SoldAsVacant, COUNT(*) AS amount
FROM NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY SoldAsVacant

SELECT 
	SoldAsVacant,
	CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
		 WHEN SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
	END
FROM NashvilleHousing


-- Update the table

UPDATE NashvilleHousing
SET SoldAsVacant = 
	CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
		 WHEN SoldAsVacant = 'N' THEN 'No'
		 ELSE SoldAsVacant
	END


--------------------------------------------------------------------------------------------------
-- Remove duplicates

-- Problem: Some transactions have duplicates with different ids
-- Solution: Mark duplicates using row_numbers and delete them

WITH RowNumbers AS
(
	SELECT *,
	ROW_NUMBER() OVER 
	(PARTITION BY ParcelID, 
				SaleDate,
				SalePrice,
				LegalReference
	ORDER BY ParcelID)
	AS row_num
FROM NashvilleHousing
)

DELETE
FROM RowNumbers
WHERE row_num > 1


--------------------------------------------------------------------------------------------------
-- Remove unused columns


SELECT * FROM NashvilleHousing

ALTER TABLE NashvilleHousing
DROP COLUMN SaleDate, PropertyAddress, OwnerAddress, TaxDistrict
